1.throws 에 대하여 설명하시오.
 - 자기 자신이 예외처리를 하지 않고 메서드를 호출한 곳으로 예외를 넘기는 것이다.
 - 예외를 받은 곳은 반드시 try/catch로 예외처리해주어야함
 - 메서드 옆에 throws 예외를 적으면 됨
 - main함수에서 throws 사용시 jvm이 예외를 받음

2.아래가 컴파일 에러가 나는 이유에 대하여 설명하시오.
try {
        	int num = 6 / 0;
        	
        	
		} catch (Exception e) {
			e.printStackTrace();
		} catch (InputMismatchException e) {
			e.printStackTrace();
		}
exception은 가장 최상위의 예외처리 클래스이므로 
catch의 중복 사용시 가장 나중에 상위 클래스들을 적어야한다.

3.try with resource 에 대하여 설명하시오.
 - try/catch구문 사용시 입출력 예외가 발생하면 finally에서 입출력 자원을 종료해주어야 메모리 낭비를 막을 수 있다.
   finally사용시 코드가 복잡해지기 양이 많아지기 때문에 try with resource는 try()안에서 객체를 생성해주면 try구문이
   끝난 후 자원을 자동으로 종료해준다.

4.equals 함수에 대하여 설명하시오.
 - 최상위 클래스인 object에 있는 메서드이다.
 - 비교하는 두 인스턴스의 주소가 같은지를 확인하는 메서드이다.
 - 같으면 true 다르면 false를 반환한다.
 
5. 과일, 사과, 배, 포도를 표현한 클래스를 만들고 이들 간의 관계를 고려하여 
하나의 클래스를 추상 클래스로 만들어 메소드 print()를 구현하고 다음과 같은 소스와 
결과가 나오도록 클래스를 작성하시오.

- 소스

Fruit fAry[] = {new Grape(), new Apple(), new Pear());

for(Fruit f : fAry)

f.print();

-  결과

나는 포도이다.
나는 사과이다.
나는 배이다.
abstract class Fruit {
	private String name;

	public void setName(String name) {
		this.name = name;
	}

	public void print() {
		System.out.println("나는 " + name + "이다");
	}
}

class Grape extends Fruit {
	public Grape() {
		super.setName("포도");
	}
}

class Apple extends Fruit {
	public Apple() {
		super.setName("사과");
	}
}

class Pear extends Fruit {
	public Pear() {
		super.setName("배");
	}
}

6. 다음 조건을 만족하도록 클래스 Person과 Student를 작성하시오.
- 클래스 Person
* 필드 : 이름, 나이, 주소 선언

- 클래스 Student
* 필드 : 학교명, 학과, 학번, 8개 평균평점을 저장할 배열로 선언
* 생성자 : 학교명, 학과, 학번 지정
* 메소드 average() : 8개 학기 평균평점의 평균을 반환

- 클레스 Person과 Student 프로그램 테스트 프로그램의 결과 : 8개 학기의 평균평점은 표준입력으로 받도록한다.
이름 : 김다정
나이 : 20

주소 : 서울시 관악구
학교 : 동양서울대학교
학과 : 전산정보학과
학번 : 20132222

----------------------------------------

8학기 학점을 순서대로 입력하세요

1학기 학점  → 3.37
2학기 학점  → 3.89
3학기 학점  → 4.35
4학기 학점  → 3.76
5학기 학점  → 3.89
6학기 학점  → 4.26
7학기 학점  → 4.89
8학기 학점  → 3.89 

----------------------------------------

8학기 총 평균 평점은 4.0375점입니다.
import java.util.Scanner;

public class Person {
	Scanner sc = new Scanner(System.in);
	private String name;
	private int age;
	private String address;

	public Person() {
		System.out.print("이름 : ");
		this.name = sc.next();
		System.out.print("나이 : ");
		this.age = sc.nextInt();
		System.out.print("주소 : ");
		this.address = sc.next();
	}

}

class Student extends Person {
	Scanner sc = new Scanner(System.in);
	private String schoolName;
	private String major;
	private String studentNum;
	private double[] averages = new double[8];

	public Student() {
		super();
		System.out.print("학교 : ");
		this.schoolName = sc.next();
		System.out.print("전공 : ");
		this.major = sc.next();
		System.out.print("학번 : ");
		this.studentNum = sc.next();
		System.out.println("-----------------------------");
	}

	public void average() {
		double total = 0;
		ㅂSystem.out.println(averages.length + "학기 학점을 순서대로 입력하세요");
		for (int i = 0; i < averages.length; i++) {
			System.out.print((i + 1) + "학기 학점 --> ");
			averages[i] = sc.nextDouble();
			total += averages[i];
		}
		System.out.println("------------------------------");
		System.out.println("\n"+averages.length + "학기 총 평균 평점은 " + total / averages.length + "점 입니다.");
	}

}
7.다음은 도형의 구성을 묘사하는 인터페이스이다.

interface Shape {
   final double PI = 3.14; // 상수
   void draw(); // 도형을 그리는 추상 메소드
   double getArea(); // 도형의 면적을 리턴하는 추상 메소드
   default public void redraw() { // 디폴트 메소드
      System.out.print("--- 다시 그립니다.");
      draw();
   }
}
다음 main() 메소드와 실행 결과를 참고하여, 인터페이스 Shape을 구현한 클래스 Circle를 작성하고 
전체 프로그램을 완성하라.

public static void main(String[] args) {
   Shape donut = new Circle(10); // 반지름이 10인 원 객체
   donut.redraw();
   System.out.println("면적은 "+ donut.getArea());
}

class Circle implements Shape {
	private double r;
	private double area;

	public Circle(double r) {

		this.r = r;
	}

	@Override
	public void draw() {
		System.out.println("반지름이 " + r + "인 원입니다.");
		area = r * r * PI;
	}

	@Override
	public double getArea() {

		return area;
	}

}
8.
다음 main() 메소드와 실행 결과를 참고하여, 문제 7의 Shape 인터페이스를 구현한 클래스 Oval, Rect를 추가 작성하고 전체 프로그램을 완성하라.

public static void main(String[] args) {
   Shape[] list = new Shape[3]; // Shape을 상속받은 클래스 객체의 레퍼런스 배열
   list[0] = new Circle(10); // 반지름이 10인 원 객체
   list[1] = new Oval(20, 30); // 20x30 사각형에 내접하는 타원
   list[2] = new Rect(10, 40); // 10x40 크기의 사각형
   for(int i=0; i<list.length; i++) list[i].redraw();
   for(int i=0; i<list.length; i++) System.out.println("면적은 "+ list[i].getArea());
}
--- 다시 그립니다.반지름이 10인 원입니다.
--- 다시 그립니다.20x30에 내접하는 타원입니다.
--- 다시 그립니다.10x40크기의 사각형 입니다.
면적은 314.0
면적은 1884.0000000000002
면적은 400.0
class Oval implements Shape {
	private double width;
	private double height;
	private double area;

	public Oval(double width, double height) {

		this.width = width;
		this.height = height;
	}

	@Override
	public void draw() {
		System.out.println(width + "X" + height + "크기에 내접하는 타원입니다.");
		area = width * height * PI;
	}

	@Override
	public double getArea() {

		return area;
	}

}

class Rect implements Shape {
	private double width;
	private double height;
	private double area;

	public Rect(double width, double height) {

		this.width = width;
		this.height = height;
	}

	@Override
	public void draw() {
		System.out.println(width + "X" + height + "크기의 사각형입니다.");
		area = width * height;
	}

	@Override
	public double getArea() {

		return area;
	}

}