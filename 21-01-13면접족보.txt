1. 게시판 삭제와 업데이트(수정)를 구현하시오.
*삭제
else if (com.equals("/delete.do")) {
			command = new BDeleteCommand();
			command.execute(request, response);
			viewPage = "list.do";
		}

	public void execute(HttpServletRequest request, HttpServletResponse response) {
		String bId = request.getParameter("bId");
		BDao dao = new BDao();
		dao.delete(bId);

	}

public void delete(String bId) {
		Connection conn = null;
		PreparedStatement pstmt = null;

		try {
			conn = dataSource.getConnection();

			String query = "delete from mvc_board where bid=?";
			pstmt = conn.prepareStatement(query);

			pstmt.setString(1, bId);

			int rn = pstmt.executeUpdate();
			System.out.println("insert 결과 " + rn);

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		} finally {
			try {

				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (Exception e2) {
				// TODO: handle exception
	
			e2.printStackTrace();
			}
		}

	}

*수정
else if (com.equals("/modify.do")) {
			command = new BModifyCommand();
			command.execute(request, response);
			viewPage = "content_view.do";
		}

public class BModifyCommand implements BCommand {

	@Override
	public void execute(HttpServletRequest request, HttpServletResponse response) {
		String bId = request.getParameter("bId");
		String bName = request.getParameter("bName");
		String bTitle = request.getParameter("bTitle");
		String bContent = request.getParameter("bContent");

		BDao dao = new BDao();
		dao.modify(bId, bName, bTitle, bContent);

	}

}

public void modify(String bId, String bName, String bTitle, String bContent) {
		Connection conn = null;
		PreparedStatement pstmt = null;

		try {
			conn = dataSource.getConnection();

			String query = "UPDATE mvc_board set bName=?,bTitle=?, bContent=? where bId=?";
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, bName);
			pstmt.setString(2, bTitle);
			pstmt.setString(3, bContent);
			pstmt.setString(4, bId);
			int rn = pstmt.executeUpdate();
			System.out.println("insert 결과 " + rn);

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (pstmt != null)
					pstmt.close();
				if (conn != null)
					conn.close();
			} catch (Exception e2) {
				e2.printStackTrace();
			}

		}

	}



2.아래를 sql 문으로 나타 내시오.
--1> 부서테이블의 모든 데이터를 출력하라.
SELECT * from dept;

--2> EMP테이블에서 각 사원의 직업, 사원번호, 이름, 입사일을 출력하라.
SELECT job, empno, ename, hiredate FROM emp;

--3> EMP테이블에서 직업을 출력하되, 각 항목(ROW)가 중복되지 않게 출력하라.
SELECT distinct job FROM emp;

--4> 급여가 2850 이상인 사원의 이름 및 급여를 표시하는 출력하라.
SELECT ename, sal FROM emp WHERE sal>=2850;

--5> 사원번호가 7566인 사원의 이름 및 부서번호를 표시하는 출력하라.
SELECT ename, deptno FROM emp WHERE empno=7566;

--6> 급여가 1500이상 ~ 2850이하의 범위에 속하지 않는 모든 사원의 이름 및 급여를 출력하라.
SELECT ename, sal FROM emp WHERE NOT sal BETWEEN 1500 AND 2850;

--7> 1981년 2월 20일 ~ 1981년 5월 1일에 입사한 사원의 이름,직업 및 입사일을 출력하라.
 입사일을 기준으로 해서 오름차순으로 정렬하라.
SELECT ename, job, hiredate FROM emp WHERE hiredate BETWEEN '81/2/20' AND '81/5/1' order by hiredate asc;

--8> 10번 및 30번 부서에 속하는 모든 사원의 이름과 부서 번호를 출력하되,
 이름을 알파벳순으로 정렬하여 출력하라.
SELECT ename, deptno FROM emp WHERE deptno in(10,30) ORDER BY ename asc;
 
--9> 10번 및 30번 부서에 속하는 모든 사원 중 급여가 1500을 넘는 사원의
 이름 및 급여를 출력하라.
--(단 컬럼명을 각각 employee 및 Monthly Salary로 지정하시오)
SELECT ename "employee", sal "Monthly Salary" FROM emp WHERE deptno IN(10,30) AND SAL>1500;
 
--10> 관리자가 없는 모든 사원의 이름 및 직위를 출력하라.
SELECT ename, job, mgr FROM emp WHERE mgr is not null;

--11> 커미션을 받는 모든 사원의 이름, 급여 및 커미션을 출력하되, 급여를 기준으로
 내림차순으로 정렬하여 출력하라.
SELECT ename, sal, comm FROM emp WHERE comm != 0 ORDER BY sal desc;

--12> 이름의 세 번째 문자가 A인 모든 사원의 이름을 출력하라.
SELECT ename FROM emp WHERE SUBSTR(ename,3)='A';
SELECT ename FROM emp WHERE INSTR(ename, 'A')=3;

--13> 이름에 L이 두 번 들어가며 부서 30에 속해있는 사원의 이름을 출력하라.
SELECT ename FROM emp WHERE ename like '%L%L%' AND deptno=30;

--14> 직업이 Clerk 또는 Analyst 이면서 급여가 1000,3000,5000 이 아닌
 모든 사원의 이름, 직업 및 급여를 출력하라.
SELECT ename, job, sal FROM emp WHERE job in ('CLERK','ANALYST') AND sal not in (1000,3000,5000);

--15> 사원번호, 이름, 급여 그리고 15%인상된 급여를 정수로 표시하되 컬럼명을
 New Salary로 지정하여 출력하라.
SELECT empno, ename, sal, sal*1.15"New Salary" FROM emp;

--16> 15번 문제와 동일한 데이타에서 급여 인상분(새 급여에서 이전 급여를 뺀 값)을 추가해서
 출력하라.(컬럼명은 Increase로 하라).
SELECT empno, ename, sal, sal*1.15"New Salary", (sal*1.15-sal)"New Salary" FROM emp;

--18> 모든 사원의 이름(첫 글자는 대문자로, 나머지 글자는 소문자로 표시) 및 이름 길이를
 표시하는 쿼리를 작성하고 컬럼 별칭은 적당히 넣어서 출력하라.
SELECT initcap(ename), length(ename) FROM emp;
 
--19> 사원의 이름과 커미션을 출력하되, 커미션이 책정되지 않은
 사원의 커미션은 'no commission'으로 출력하라.
SELECT ename, decode(comm,null,'no commission',comm) from emp;

--20> 모든 사원의 이름,부서번호,부서이름을 표시하는 질의를 작성하라.(DECODE)
SELECT ename,e.deptno,dname from dept d,emp e where d.deptno=e.deptno;