1.ArrayList 와 LinkedList 의 장단점은?
 * ArrayList 
   장점 : 저장된 인스턴스의 참조가 빠르다.
   단점 : 저장 공간을 늘리는 과정에서 시간이 비교적 많이 소요되고 
          인스턴스의 삭제 과정에서 많은 연산이 필요할 수 있다.
 * LinkedList
   장점 : 저장 공간을 늘리는 과정이 간단하다.
          저장된 인스턴스의 삭제 과정이 단순한다.
   단점 : 저장된 인스턴스의 참조 과정이 배열에 비해 복잡하다. 따라서 느릴 수 있다.

2.Scanner 클래스로 -1이 입력될 때까지 양의 정수를 입력받아  저장하고 검색하여 가장 큰 수를 출력하는 프로그램을 작성하라

정수(-1이 입력될 때까지)>> 10 6 22 6 88 77 -1

가장 큰 수는 88
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

public class Max {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int num;
		List<Integer> list = new LinkedList<>();

		while (true) {
			System.out.print("정수 (-1이 입력될 때까지)>> ");
			for (int i : list)
				System.out.print(i + " ");
			num = sc.nextInt();
			if (num <= 0) {
				break;
			}
			list.add(num);
		}

		if (num == -1) {
			Collections.sort(list);
			System.out.println("가장 큰 수는 " + list.get(list.size() - 1));
		}

	}

}

3.로또 프로그램을 작성하시오.(Set 으로)
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class Lotto {
	public static void main(String[] args) {
		Set<Integer> lotto = new HashSet<Integer>();
		while (lotto.size() != 6) {
			lotto.add((int) (Math.random() * 25 + 1));
		}
		for (Iterator<Integer> itr = lotto.iterator(); itr.hasNext();) {
			System.out.print(itr.next() + "\t");
		}
		System.out.println();
	}
}

4.Set에 대하여 설명하시오.
 - set은 저장 순서가 유지되지 않는다.
 - 데이터의 중복 저장을 허용하지 않는다.

5.도시 이름, 위도, 경도 정보를 가진 Location 클래스를 작성하고, 도시 이름을 '키'로 하는 HashMap<String, Location> 컬렉션을 만들고, 사용자로부터 입력 받아 4개의 도시를 저장하라. 그리고 도시 이름으로 검색하는 프로그램을 작성하라.

도시, 경도, 위도를 입력하세요.

>> 서울, 37, 126

>> LA, 34, -118

>> 파리, 2, 48

>> 시드니, 151, -33

----------------------------------

서울 37 126	

LA 34 -

파리 2 48

시드니 151 -33

----------------------------------

도시 이름 >> 피리

피리는 없습니다.

도시 이름 >> 파리

파리 2 48

도시 이름 >> 그만
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Scanner;
import java.util.Map.Entry;

public class Tets {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Map<String, Location> city = new HashMap<String, Location>();
		System.out.println("도시, 경도, 위도를 입력하세요.");
		for (int i = 0; i < 4; i++) {
			System.out.print(">> ");
			String input = sc.nextLine();
			String[] ar = input.split(", ");
			city.put(ar[0], new Location(ar[0], ar[1], ar[2]));
		}
		System.out.println("-------------------");
		for (Location i : city.values()) {
			System.out.println(i);
		}
		System.out.println("---------------------");
		while (true) {
			System.out.print("도시 이름 >> ");
			String cityName = sc.next();

			if (city.containsKey(cityName)) {
				System.out.println(city.get(cityName));
			} else if (cityName.equals("그만")) {
				System.out.println("프로그램을 종료합니다.");
				break;
			} else
				SQystem.out.println(cityName + "는 없습니다.");
		}

	}
}

class Location {
	private String cityName;
	private String hardness;
	private String latitude;

	public Location(String cityName, String hardness, String latitude) {
		this.cityName = cityName;
		this.hardness = hardness;
		this.latitude = latitude;
	}

	@Override
	public String toString() {
		return cityName + " " + hardness + " " + latitude;
	}
}
6.Scanner 클래스를 사용하여 6개 학점('A', 'B', 'C', 'D', 'F')을 문자로 입력받아 ArrayList에 저장하고, ArrayList를 검색하여 학점을 점수(A=4.0, B=3.0, C=2.0, D=1.0, F=0)로 변환하여 평균을 출력하는 프로그램을 작성하라.

6개의 학점을 빈 칸으로 분리 입력(A/B/C/D/F) >> A C A B F D

2.3333333333333335
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Grade {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		int sum = 0;
		System.out.print("6개의 학점을 빈 칸으로 분리 입력(A/B/C/D/F) >> ");
		String add = sc.nextLine();
		List<String> grade = Arrays.asList(add.split(" "));

		for (int i = 0; i < grade.size(); i++) {

			switch (grade.get(i)) {
			case "A":
				grade.set(i, "4");
				break;
			case "B":
				grade.set(i, "3");
				break;
			case "C":
				grade.set(i, "2");
				break;
			case "D":
				grade.set(i, "1");
				break;
			case "F":
				grade.set(i, "0");
				break;

			}
		}
		System.out.println(grade);
		for (String a : grade) {
			sum += Integer.valueOf(a);
		}
		System.out.println((double) sum / 6);

	}
}

7.출력이 아래와 같이 나오도록 하시오(필수)
        HashSet<Num> set = new HashSet<>();
        set.add(new Num(7799));
        set.add(new Num(9955));
        set.add(new Num(7799));

        System.out.println("인스턴스 수: " + set.size());

        for(Num n : set)
            System.out.print(n.toString() + '\t');

        System.out.println();

====출력

인스턴스 수: 2
7799	9955
class Num {
	private int num;

	public Num(int num) {
		this.num = num;
	}

	@Override
	public int hashCode() {

		return num % 3;
	}

	@Override
	public boolean equals(Object obj) {
		if (num == ((Num) obj).num) {
			return true;
		} else
			return false;
	}

	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return String.valueOf(num);
	}
}

8.Set 호출되는 원리와 순서를 설명하시오?
 - hashcode()메서드를 호출하여 hashcode값을 받고 
   같은 값이 있으면 equals()메서드를 호출하여 비교하여 중복저장을 막는다.


9.아래와 같이 출력되도록 하시오.
        HashSet<Person> hSet = new HashSet<Person>();
        hSet.add(new Person("LEE", 10));
        hSet.add(new Person("LEE", 10));
       	hSet.add(new Person("PARK", 35));
        hSet.add(new Person("PARK", 35));

        System.out.println("저장된 데이터 수: " + hSet.size());
        System.out.println(hSet);
============
저장된 데이터 수: 2
[LEE(10세), PARK(35세)]
public class number8 {
	public static void main(String[] args) {
		HashSet<Person> hSet = new HashSet<Person>();
		hSet.add(new Person("LEE", 10));
		hSet.add(new Person("LEE", 10));
		hSet.add(new Person("PARK", 35));
		hSet.add(new Person("PARK", 35));

		System.out.println("저장된 데이터 수: " + hSet.size());
		System.out.println(hSet);
	}
}

class Person {
	private String name;
	private int age;

	public Person(String name, int age) {

		this.name = name;
		this.age = age;
	}\

	@Override
	public String toString() {
		// TODO Auto-generated method stub
		return name + "(" + age + "세)";
	}

	@Override
	public int hashCode() {

		return age;
	}

	@Override
	public boolean equals(Object obj) {
		if (name == ((Person) obj).name && age == ((Person) obj).age) {
			return true;
		} else
			return false;
	}
}
