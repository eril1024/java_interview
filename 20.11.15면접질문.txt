1.키워드란 무엇인가?
키워드란 예약어라고도 불리며 자바시스템에서 이미 정의해논 단어들을 뜻하며 특정한 기능을 가진다.
키워드는 변수명이나 메소드명으로 사용할 수 없다. 대표적인 키워드로는 public, boolean,int 등이 있다.

2.2의 보수법이란?
보수란 어떤 수의 n의 보수는 더했을 때 n이 나오는 수를 말한다.예를 들어 3의 7의 보수는 3에 4를 더하며 7이됨으로 보수는 4이다.
컴퓨터에서는 0과 1만 사용가능 하기 때문에 2의 보수법을 사용하는 것이 적절하다.

3.컴퓨터에서 음의 정수 표현방법에 대하여 설명하시오.
컴퓨터에서 음수를 표현하기 위해서는 8자리 2진수에서 맨 왼쪽자리에 0과 1을 사용하여 0이면 양수 1이면 음수로 표현한다.
만약 00001001과 -를 붙힌 10001001을 더하면 0이 나와야 하지만 실제로 더해보면 18이라는 숫자가 나온다.이것을 해결하기 위해
보수법을 이용해 풀면되는데 00001001에 1의 보수를 취하면 11110110이라는 숫자가 나온다 쉽게 0은 1로 바꿔주고 1은 0으로 바꿔주면된다.
여기에 맨 오른쪽자리에 1을 더해주면 11110111이라는 수가 나오는데 00001001과 더해주면 100000000이 된다.
맨 왼쪽 한자리 늘어난 것을 버려주면 되는데 버리게 되면 연산 값은 0이 나오게 된다.
그러므로 컴퓨터에서 00001001의 음의 정수는 11110111이 된다.

4.-5가 컴퓨터에서의 2진수 값을 나타내시오.
먼저 -5의 절대값인 5의 2진수의 값을 구하고 위에서 한것처럼 그 수의 음의 정수를 구하면된다.
5의 2진수 값은 00000101이다. 이것의 1의 보수는 11111010이고 여기에 1을 더해주면 11111011이 된다. 5의 2진수 값에 이 수를
더하게 되면 0이나오므로 11111011은 컴퓨터에서의 -5의 2진수 값이 된다.

5.실수에서 오차가 생기는 원인은 무엇인가?
정수는 유한하지만 실수는 무한대로 표현할 수 있기 때문에 근사값으로 표현한다. 그래서 실수는 오차가 생길수 밖에 없다.

6.실수의 표현법은(고정소수법, 부동소수법)을 설명하시오.
고정소수법이란 소수의 자리를 고정해서 표현한다.

부동소수법이란 소수의 자리가 움직이기 때문에 고정소수법보다 더 큰 수를 저장할 수 있다.

7.정밀도란 무엇인가요?
실수 부분에서 정밀도가 클수록 오차범위가 작다.


8.상수란 무엇이며 변수와의 차이는?
상수는 최초로 값을 입력하면 이후에는 변경할 수 없는 수를 말한다. 변수 앞에 final을 사용하면 된다. 
보통 변수의 모든 글자를 대문자로 쓰는 것이 관례이다. 

9.초기화란 무엇인가?
변수의 선언 후 최초로 값을 입력하는 것을 말한다.선언과 동시에 초기화를 할 수도 있고 선언 하고 후에 초기화를 해도 괜찮다.

10.리터럴이란 무엇인가요?
리터럴이란 변수 및 상수에 저장되는 값을 말한다.

11.아래의 내용이 에러가 나는 이유와 수정방법은?
System.out.println(3147483647 + 3147483648);
일반적인 계산에서 자료형은 int가 되기 때문에 위의 수들은 int의 데이터 범위를 초과했다.
그러므로 long으로 선언해서 계산해야 한다.

12.자동 형변환과 명시적 형변환에 대하여 설명하시오.
자동 형변환은 자료형이 다른 두 수를 연산할 때 자동으로 한 쪽 자료형에 맞춰 변환시켜주는 것을 뜻한다. 크기가 더 크거나 소수점을 
보존할 수 있는 자료형을 선택해 맞춰준다. 예로 float과 long이 연산할시 long이 크기가 더 크지만 소수점이 사라지기 때문에 
소수점을 보존할 수 있게 float자료형에 맞춰준다.
명시적 형변환이란 강제적으로 형변환을 시키는 것을 말하며 값 옆에 쓰고 싶은 (자료형)을 씀으로 써 사용할 수 있다.

13.아래의 에러가 나는 이유를 설명하고 수정하시오.
    	int a = 3;
    	int b = 4;
    	
    	double result = a / b;
    	
    	System.out.println(result);
직접 계산해보면 값은 0.75가 나와야 하지만 실제로는 0이 나온다. a/b 둘다 자료형이 int이기 때문에 a/b의 연산값은 0이 나온다. 
result의 자료형이 double이어도 이미 연산값이 0이기 때문에 result에는 0이 저장된다.
이를 해결하기 위해서는 한 쪽만 (double)자료형을 바꿔주면 된다. 처음부터 a나 b를 double자료형으로 선언하거나 a/b에서 한 쪽에
(double)을 붙혀주면 된다.


14.이스퀘이프 시퀀스의 종료를 나열하고 기능을 설명하시오.
"\b"- 백스페이스를 입력한다.
"\n" - 다음 줄로 남어간다.
"\t" - 수평 탭을 입력한다.
"\r" - 캐리지 리턴 문자를 입력한다.
"\\" - 백슬리시 문자 입력
"\'" - 작은따옴표 문자 입력
"\"" - 큰따옴표 문자 입력

15.아래의 출력결과를 확인하고, 130이 나오는 이유를 설명하시오.
System.out.println('A' + 'A');
char형 A의 아스키코드 값은 65이므로 두 값을 더하면 130이 나온다.

