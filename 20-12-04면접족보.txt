1.아래의 접근제한자에 대하여 설명하시오.
 -private : 해당 클래스내에서만 접근가능
 -protected : 같은 패키지내에서와 상속받은 클래스에서도 접근가능
 -default : 같은 패키지내에서 접근가능
 -public : 같은 프로젝트내에서 접근가능

2.지역변수에 접근제한자를 붙이지 않는 이유는?
 - 지역변수는 그 영역에서만 사용가능 하기 때문에 굳이 붙힐 이유가 없다.

3.캡슐화에 대하여 설명하시오.
 - 캡슐화는 데이터와 데이터를 처리하는 코드를 하나로 묶는 것이다.
 - 접근제어자로 외부에서 객체의 변수들을 해당 객체의 메서드를 통해서만 접근할 수 있게 하고
 - 외부에서 객체를 사용할 때 객체에서 주어진 조작만 가능하게 해 유지보수 할 때 연관된 모든 클래스를 수정할 필요가 없다는
   장점이 있다.

4.랜덤 숫자 맞추기 게임을 짜시오.
import java.util.Random;

public class Test {
	Random r = new Random();
	private int num;
	private int coin = 10;
	private int rand = r.nextInt(100)+1;
	private boolean b = true;
	
	public Test() {}
	
	public boolean play(int num) {
		this.num = num;
		coin--;

		if (rand < num) {
			System.out.println("DOWN");

		} else if (rand > num) {
			System.out.println("UP");

		} else {
			System.out.println("축하합니다.정답입니다. 횟수 : " + (10 - coin) + "회");
			b = false;
			return b;
		}

		if (coin == 0) {
			System.out.println("횟수를 다사용하셨습니다.");
			b = false;
		}
		return b;

	}

}
import java.util.Scanner;

public class Main {
	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		boolean b = true;
		char yesNo;

		while (true) {
			Test t1 = new Test();

			while (b) {
				b = t1.play(sc.nextInt());
			}
			System.out.println("계속하시겠습니까?(Y/N)");
			yesNo = sc.next().charAt(0);
			if (yesNo == 'y' || yesNo == 'Y') {
				b = true;
				continue;
			} else {
				System.out.println("프로그램을 종료합니다.");
				sc.close();
				break;
			}
		}

	}
}

5.static 변수의 다른 용어 3가지를 말해 보시오.
 - 클래스 변수, 공유 변수, static변수

6.자바의 메모리 영역을 3가지로 나누고, 해당 영역에 들어가는 정보를 말하여 보시오.
 - 메모리 영역은 method area, call stack, heap영역으로 나뉜다.
  - method area에는 클래스의 정보와 static변수들이 들어가고 함수를 올리는 역할을 한다.
  - call stack은 올라오는 함수들을 쌓아놓는 역할을 한다.
  - heap은 인스턴스가 생성되는 곳이다.

7.static 변수의 접근 방법은?
 - static변수는 객체를 만들어 접근할 수 있고 해당 클래스에 들어가 직접적으로 접근가능하다.

8.클래스 변수의 활용의 예를 드시오.
 - 인스턴스별로 가지고 있을 필요가 없는 변수에 할용된다.
  - 값의 참조가 목적인 변수 ex) PI = 3.14 ..
  - 값의 공유가 목적인 변수 ex) 일련번호 ..

9.스태틱 함수에 인스턴스 변수가 올수 없는 이유는?
 - 스태틱 함수는 클래스가 메모리에 올라갈 때 이미 생성되어 있기 때문에 인스턴스 변수를 사용할 수 없다.
 - 반대로 인스턴스 함수에 스태틱 변수는 가능하다.

10.아래의 프로그램을 작성 하시오.

다음 멤버를 가지고 직사각형을 표현하는 Rectangle 클래스를 작성하라.

- int 타입의 x, y, width, height 필드: 사각형을 구성하는 점과 크기 정보
- x, y, width, height 값을 매개변수로 받아 필드를 초기화하는 생성자
- int square() : 사각형 넓이 리턴
- void show() : 사각형의 좌표와 넓이를 화면에 출력
- boolean contatins(Rectangle r) : 매개변수로 받은 r이 현 사각형 안에 있으면 true 리턴
- main() 메소드의 코드와 실행 결과는 다음과 같다
public static void main(String[] args) {
   Rectangle r = new Rectangle(2, 2, 8, 7);
   Rectangle s = new Rectangle(5, 5, 6, 6);
   Rectangle t = new Rectangle(1, 1, 10, 10);
   
   r.show();
   System.out.println("s의 면적은 "+s.square());
   if(t.contains(r)) System.out.println("t는 r을 포함합니다.");
   if(t.contains(s)) System.out.println("t는 s를 포함합니다.");
}
(2,2)에서 크기가 8x7인 사각형
s의 면적은 36
t는 r을 포함합니다.
public class Rectangle {
	private int x, y, width, height;

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	public int getWidth() {
		return width;
	}

	public void setWidth(int width) {
		this.width = width;
	}

	public int getHeight() {
		return height;
	}

	public void setHeight(int height) {
		this.height = height;
	}

	public Rectangle(int x, int y, int width, int height) {
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	}

	int square() {
		return width * height;
	}

	boolean contains(Rectangle r) {
		if (r.x + r.width <= x + width && r.y + r.height <= y + height) {
			return true;
		} else
			return false;
	}

	void show() {
		System.out.println("(" + x + "," + y + ")에서 크기가 " + width + "x" + height + "인 사각형");
	}

}

public class Main {
	public static void main(String[] args) {
		Rectangle r = new Rectangle(2, 2, 8, 7);
		Rectangle s = new Rectangle(5, 5, 6, 6);
		Rectangle t = new Rectangle(1, 1, 10, 10);

		r.show();
		System.out.println("s의 면적은 " + s.square());
		if (t.contains(r))
			System.out.println("t는 r을 포함합니다.");
		if (t.contains(s))
			System.out.println("t는 s를 포함합니다.");

	}
}
